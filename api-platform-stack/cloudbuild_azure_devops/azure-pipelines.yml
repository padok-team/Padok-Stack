# Node.js
#  - Build a general Node.js project with npm.
#  - Add steps that analyze code
#  - Build and push Docker image
#  - Then deploy it to 3 clusters among 2 kinds environments
#
# more:
#  - https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

# Careful:
#  - Some steps need external connections to be set in order to work
#    ex:
#      - Connection to Azure AKS clusters
#      - Connection to Azure container registry
#      - Subscriptions
#
# You need to define those connection first in Azure devops GUI -> Project settings (bottom-left corner)
#                                                               -> Service connections
#                                                               -> New service connection
#                                                               -> Kubernetes | Docker registry | Azure Resource Manager | ...
#
# Only when those connections are defined you can use them in a pipeline

# Also note that each job defined under the "steps" hash can be defined using the GUI pannel on the right when you
# are editing the pipeline in the Azure devops GUI -> Pipelines
#                                                  -> Select your pipeline
#                                                  -> edit
#
# So this file is an example but you should use the GUI instead in order to build you pipeline

#Â Pipelines triggers
#  - "trigger" is for the branch the current commit blong to
#  - "pr" is for the source branch commit in the case of a merge

trigger:
- staging
- master

pr: none

# Build environment image to use among those available:
#  - https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops#use-a-microsoft-hosted-agent
pool:
  vmImage: 'ubuntu-latest'

steps:

###
# Build and test
###

# Install NodeJS tools
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

# Build with NPM
- script: |
    npm install
    npm run build
  displayName: 'npm install and build'

# Test with NPM
- script: npm run test:ci

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: JUnit
    testResultsFiles: '**/junit.xml'


###
# Packaging
###

# Build and push with Docker
# External connection
#  - containerRegistry: 'Docker Registry'
- task: Docker@2
  displayName: Docker - Push image to container registry
  inputs:
    containerRegistry: 'Docker Registry'
    repository: 'api'
    command: 'buildAndPush'
    Dockerfile: 'Dockerfile'
    tags: $(Build.SourceVersion)


###
# Deploy to Europe staging -> only for commits on staging
###

# Init Helm
# External connection
#  - kubernetesServiceConnection: 'Kubernetes Europe Staging'
- task: HelmDeploy@0
  displayName: Init Helm - Kubernetes Europe staging
  # Only if we are on staging branch
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/staging')
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceConnection: 'Kubernetes Europe Staging'
    command: 'init'

# Deploy with Helm
# External connection
#  - kubernetesServiceConnection: 'Kubernetes Europe Staging'
- task: HelmDeploy@0
  displayName: Deploy Helm - Kubernetes Europe staging
  # Only if we are on staging branch
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/staging')
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceConnection: 'Kubernetes Europe Staging'
    command: 'upgrade'
    chartType: 'FilePath'
    chartPath: 'kubernetes'
    releaseName: 'api'
    overrideValues: 'image.tag=$(Build.SourceVersion),image.repository=<container_reg_url>/<docker_repository>'
    valueFile: '<path_from_repo_root_dir>'


###
# Deploy to Asia production -> only for commits on master
###

- task: HelmDeploy@0
  displayName: Init Helm - Kubernetes Asia production
  # Only if we are on master branch
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceConnection: 'Kubernetes Asia Production'
    command: 'init'

- task: HelmDeploy@0
  displayName: Deploy Helm - Kubernetes Asia production
  # Only if we are on master branch
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceConnection: 'Kubernetes Asia Production'
    command: 'upgrade'
    chartType: 'FilePath'
    chartPath: 'kubernetes'
    releaseName: 'api'
    overrideValues: 'image.tag=$(Build.SourceVersion),image.repository=<container_reg_url>/<docker_repository>'
    valueFile: '<path_from_repo_root_dir>'


###
# Deploy to Europe production -> only for commits on master
###

- task: HelmDeploy@0
  displayName: Init Helm - Kubernetes Europe production
  # Only if we are on master branch
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceConnection: 'Kubernetes Europe Production'
    command: 'init'

- task: HelmDeploy@0
  displayName: Deploy Helm - Kubernetes Europe production
  # Only if we are on master branch
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceConnection: 'Kubernetes Europe Production'
    command: 'upgrade'
    chartType: 'FilePath'
    chartPath: 'kubernetes'
    releaseName: 'api'
    overrideValues: 'image.tag=$(Build.SourceVersion),image.repository=<container_reg_url>/<docker_repository>'
    valueFile: '<path_from_repo_root_dir>'
